# .github/workflows/release.yml
name: Release

on:
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    env:
      VERSION: ${{ github.run_number }}
      REGISTRY: ${{ secrets.REGISTRY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: Create release branch
        run: |
          git checkout -b releases/${{ env.VERSION }}
          git push origin releases/${{ env.VERSION }}

      - name: Login to Yandex Container Registry
        run: |
          echo "${{ secrets.YCR_TOKEN }}" | docker login \
            --username "${{ secrets.YCR_USER }}" \
            --password-stdin cr.yandex

      - name: Build & Push Docker images
        run: |
          docker build -t "${{ env.REGISTRY }}:${{ env.VERSION }}" .
          docker tag "${{ env.REGISTRY }}:${{ env.VERSION }}" "${{ env.REGISTRY }}:${{ env.VERSION }}_latest"
          docker push "${{ env.REGISTRY }}:${{ env.VERSION }}"
          docker push "${{ env.REGISTRY }}:${{ env.VERSION }}_latest"

      - name: Create git tag
        run: |
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"

      - name: Prepare issue body
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude "${{ env.VERSION }}" || echo "")
          COMMITS=$(git log "$PREV_TAG..HEAD" --oneline)
          DATE=$(date +'%Y-%m-%d')
          cat <<EOF > ISSUE_BODY.md
            Дата: $DATE
            Автор: ${{ github.actor }}
            Версия: ${{ env.VERSION }}

            Коммиты:
            $COMMITS

            Docker: ${{ env.REGISTRY }}:${{ env.VERSION }}
          EOF

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Release ${{ env.VERSION }} deployed
          content-filepath: ISSUE_BODY.md

      - name: Update CHANGELOG.md
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude "${{ env.VERSION }}" || echo "")
          COMMITS=$(git log "$PREV_TAG..HEAD" --oneline)
          DATE=$(date +'%Y-%m-%d')
          {
            echo "## ${{ env.VERSION }} ($DATE)"
            echo
            echo "$COMMITS"
            echo
            cat CHANGELOG.md
          } > CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore: update changelog for release ${{ env.VERSION }}"
          git push origin releases/${{ env.VERSION }}
